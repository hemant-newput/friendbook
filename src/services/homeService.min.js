const dbUtil=require("../utils/dbUtil"),jwt=require("jsonwebtoken"),op=require("sequelize").Op;require("dotenv").config();const homeService={addPost:async function validateLogin(postData){const postGenie=await(await dbUtil.getDBConnection()).postTable,postAddedData=await postGenie.create({caption:postData.caption,description:postData.message,likes:0,userid:postData.token.userID,image_url:postData.photoUrl,postType:postData.postType});return postAddedData},updateUserData:async function(queryData){const userGenie=await(await dbUtil.getDBConnection()).userTable;let updateData;updateData="basic"==queryData.type?{name:queryData.name,gender:queryData.gender,dob:queryData.dob,martialStatus:queryData.married,location:queryData.location}:{position:queryData.occupation,skills:queryData.skills,jobCompany:queryData.jobCompany};try{return await userGenie.update(updateData,{where:{id:queryData.token.id}}),{success:!0,message:"UserData Update Successfully"}}catch(err){return{success:!1,message:"Error Occured Contact Admin",data:err}}},getUserData:async function(data){const userGenie=await(await dbUtil.getDBConnection()).userTable,postGenie=await(await dbUtil.getDBConnection()).postTable,friendGenie=await(await dbUtil.getDBConnection()).friendTable;try{const userData=await userGenie.findOne({where:{id:data.userID}}),postData=await postGenie.findAll({where:{userid:data.userID}}),followerData=await friendGenie.findAll({where:{userID:data.userID}}),followingData=await friendGenie.findAll({where:{friendID:data.userID}}),posts=[];postData.map(post=>{posts.push(post.dataValues)});const resultData={name:userData.name,position:userData.position,followers:followerData.length,following:followingData.length,posts:posts,activities:posts.length,profileImage:userData.profileImage,gender:userData.gender,dob:userData.dob,married:userData.martialStatus,location:userData.location,occupation:userData.position,skills:userData.skills,jobCompany:userData.jobCompany,id:userData.id,internalAccess:parseInt(data.userID)===parseInt(data.token.id)};return{success:!0,message:"UserData Update Successfully",resultData:resultData}}catch(err){return{success:!1,message:"Error Occured Contact Admin",data:err}}},getPosts:async function(userID){try{const friendGenie=await(await dbUtil.getDBConnection()).friendTable,sequelize=await dbUtil.dbConnector(),Sequelize=require("sequelize"),userTable=require("../models/user.model")(sequelize,Sequelize),followerData=await friendGenie.findAll({where:{userID:userID}}),friendsArray=[parseInt(userID)];followerData.map(follower=>{follower.userID==userID&&friendsArray.push(follower.friendID)});let resultData=[];const masterConn=await dbUtil.dbConnector(),posts=await masterConn.query("select * from post_tables as p left JOIN user_tables as u  on p.userid = u.id");return posts[0].map(post=>{friendsArray.includes(post.userid)&&resultData.push(post)}),{success:!0,message:"Post fetch successful",resultData:resultData}}catch(err){return{success:!1,message:"Error Occured Contact Admin",data:err}}},getFriendList:async function(userData){const userGenie=await(await dbUtil.getDBConnection()).userTable,friendGenie=await(await dbUtil.getDBConnection()).friendTable;try{friendData=await friendGenie.findAll({where:{userID:userData,friendStatus:!0}}),userData=await userGenie.findAll({});const resultData=[];return friendData.map(friend=>{userData.map(user=>{user.id===friend.friendID&&resultData.push({userID:user.id,name:user.name,position:user.position,company:user.jobCompany,image:user.profileImage,status:!0})})}),{success:!0,message:"These are your friends",resultData:resultData}}catch(err){return{success:!1,message:"Error Occured Contact Admin",data:err}}},addFriend:async function(queryData){const userGenie=await(await dbUtil.getDBConnection()).userTable,friendGenie=await(await dbUtil.getDBConnection()).friendTable;try{friendGenie.update({friendStatus:!0},{where:{userID:queryData.token.id,friendID:queryData.friendID}});const userData=await userGenie.findOne({where:{id:queryData.friendID}});return{success:!0,message:`Started Following ${userData.name}`}}catch(err){return{success:!1,message:"Error Occured Contact Admin",data:err}}},Unfriend:async function(queryData){const userGenie=await(await dbUtil.getDBConnection()).userTable,friendGenie=await(await dbUtil.getDBConnection()).friendTable;try{friendGenie.update({friendStatus:!1},{where:{userID:queryData.token.id,friendID:queryData.friendID}});const userData=await userGenie.findOne({where:{id:queryData.friendID}});return{success:!0,message:`Stopped Following ${userData.name}`}}catch(err){return{success:!1,message:"Error Occured Contact Admin",data:err}}},getUserPhotos:async function(queryData){const loginGenie=await(await dbUtil.getDBConnection()).loginTable,userTable=await(await dbUtil.getDBConnection()).loginTable;try{const data=await loginGenie.findOne({where:{userID:queryData.userID},includes:{model:userTable,as:"userTable"}});return{success:!0,data:data}}catch(err){return{success:!1,message:"Error Occured Contact Admin",data:err}}},getSuggetions:async function(queryData){const userGenie=await(await dbUtil.getDBConnection()).userTable,friendGenie=await(await dbUtil.getDBConnection()).friendTable;try{const resp=[],users=await userGenie.findAll(),usersArray=[];users.map(user=>{usersArray.push(user.id)});const friendData=await friendGenie.findAll({where:{userID:queryData.userID}}),friendsArray=[parseInt(queryData.userID)];friendData.map(follower=>{follower.userID==queryData.userID&&friendsArray.push(follower.friendID)});const unknownPeople=usersArray.filter(x=>!friendsArray.includes(x)),unknownPeopleData=await userGenie.findAll({where:{id:{[op.in]:unknownPeople}}});return{success:!0,unknownPeopleData:unknownPeopleData}}catch(err){return{success:!1,message:"Error Occured Contact Admin",data:err}}},likePost:async function(queryData){const likeGenie=await(await dbUtil.getDBConnection()).likeTable;try{const likeData=likeGenie.create({postID:queryData.postID,userID:queryData.token.id});return{success:!0,message:"The post has been liked",likeData:likeData}}catch(err){return{success:!1,message:"Error Occured Contact Admin",data:err}}},dislikePost:async function(queryData){const likeGenie=await(await dbUtil.getDBConnection()).likeTable;try{const dislikeData=likeGenie.destroy({where:{postID:queryData.postID,userID:queryData.token.id}});return{success:!0,message:"The post has been disliked",dislikeData:dislikeData}}catch(err){return{success:!1,message:"Error Occured Contact Admin",data:err}}}};module.exports=homeService;